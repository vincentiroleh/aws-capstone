version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.4.0
  
parameters:
  docker_image:
    type: string
    default: python:3.10.0-bullseye


jobs:
  build-app:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/app

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - ./venv

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
  build-and-push-image:
    machine: true
    steps:
      - checkout
      - run:
          name: Build image and push to docker
          command: |
              docker login --username ${DOCKER_USERNAME} --password ${DOCKER_PASS}
              docker build -t capstoneproj:latest .
              docker images ls
              docker tag capstoneproj ${DOCKER_USERNAME}/capstoneproj:latest
              docker push ${DOCKER_USERNAME}/capstoneproj:latest
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: capstoneproj
    steps:
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - aws-eks/create-cluster:
          cluster-name: capstoneproj
          node-type: t3.micro
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          no_output_timeout: 30m
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          no_output_timeout: 30m
          get-rollout-status: true
          resource-file-path: deployment/app-deployment.yaml
          resource-name: deployment/capstoneproj
      - kubernetes/create-or-update-resource:
          no_output_timeout: 30m
          resource-file-path: deployment/app-service.yaml
        
workflows:
  default:
    jobs:
      - build-app
      - build-and-push-image:
          requires: [build-app]
          filters:
            branches:
              only: [main]
      - create-cluster:
          requires: [build-and-push-image]
      - create-deployment:
          cluster-name: capstoneproj
          aws-region: us-east-1
          requires:
            - create-cluster
        